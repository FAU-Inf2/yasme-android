apply plugin: 'android'

android {
    compileSdkVersion 19
    buildToolsVersion "19.1.0"

    defaultConfig {
        applicationId "net.yasme.android"
        minSdkVersion 14
        targetSdkVersion 19
        versionCode 1
        versionName "1.0"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    signingConfigs {
        release {
            storeFile file("unknown")
            storePassword "unknown"
            keyAlias "unknown"
            keyPassword "unknown"
        }
    }

    buildTypes {
        release {

            def connectionFile = "$buildDir/intermediates/res/release/values/values.xml"
            println(connectionFile)
            def updatedContent = new File(connectionFile).getText('UTF-8').replaceAll("devel.yasme.net", "connect.yasme.net")
            new File(connectionFile).write(updatedContent, 'UTF-8')

            runProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    buildTypes.all { buildType ->
        println buildType.name
        println buildType.debuggable
        print ""
        if (!buildType.debuggable) {
            def connectionFile = "$buildDir/intermediates/res/${buildType.name}/values/values.xml"
            println(connectionFile)
            def updatedContent = new File(connectionFile).getText('UTF-8').replaceAll("devel.yasme.net", "connect.yasme.net")
            new File(connectionFile).write(updatedContent, 'UTF-8')
        }
    }

//    replaceConnection = { buildType, fromString, toString ->
//        def connectionFile = "$buildDir/${buildtype.name}/src/main/res/values/connection.xml"
//        println(connectionFile)
//        def updatedContent = new File(connectionFile).getText('UTF-8').replaceAll(fromString, toString)
//        new File(connectionFile).write(updatedContent, 'UTF-8')
//    }

    sourceSets {

        main.java.srcDirs = ['src/main/java']
        main.resources.srcDirs = ['src/main/resources']

        androidTest {
            java.srcDirs = ['src/test/java']
        }
        packagingOptions {
            exclude 'META-INF/DEPENDENCIES'
            exclude 'META-INF/NOTICE'
            exclude 'META-INF/LICENSE'
            exclude 'META-INF/LICENSE.txt'
            exclude 'META-INF/NOTICE.txt'
            exclude 'META-INF/ASL2.0'
        }
    }
}

dependencies {
    //TODO libs directory not needed anymore?
    //compile fileTree(dir: 'libs', include: ['*.jar'])
    compile group: 'org.apache.httpcomponents', name: 'httpclient-android', version: '4.3.3'
    compile 'com.j256.ormlite:ormlite-core:4.48'
    compile 'com.j256.ormlite:ormlite-android:4.48'
    compile 'org.apache.httpcomponents:httpclient:4.3.4'
    compile 'org.apache.httpcomponents:httpmime:4.3.4'
    compile 'com.fasterxml.jackson.core:jackson-annotations:2.1.4'
    compile 'com.fasterxml.jackson.core:jackson-core:2.1.4'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.1.4'
    compile 'com.google.android.gms:play-services:3.1.+'
    // compile 'com.android.support:support-v4:+'
    // compile 'com.android.support:support-v13:19.+'
    compile 'com.android.support:support-v4:20.+'
    compile 'com.android.support:support-v13:20.+'
}


allprojects {
    afterEvaluate { project ->
        def propsFile = rootProject.file('keystore.properties')
        def configName = 'release'

        if (propsFile.exists() && android.signingConfigs.hasProperty(configName)) {
            def props = new Properties()
            props.load(new FileInputStream(propsFile))
            android.signingConfigs[configName].storeFile = file(props['storeFile'])
            android.signingConfigs[configName].storePassword = props['storePassword']
            android.signingConfigs[configName].keyAlias = props['keyAlias']
            android.signingConfigs[configName].keyPassword = props['keyPassword']
        }
    }
}
